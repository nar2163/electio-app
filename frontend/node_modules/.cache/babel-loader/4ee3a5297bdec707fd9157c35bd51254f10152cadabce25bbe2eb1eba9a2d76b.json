{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport * as React from 'react';\nimport convert from 'react-from-dom';\nimport { canUseDOM, isSupportedEnvironment, omit, randomString, STATUS } from './helpers';\nexport var cacheStore = Object.create(null);\nvar InlineSVG = /** @class */function (_super) {\n  __extends(InlineSVG, _super);\n  function InlineSVG(props) {\n    var _this = _super.call(this, props) || this;\n    Object.defineProperty(_this, \"isInitialized\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(_this, \"isActive\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(_this, \"hash\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(_this, \"handleLoad\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: function (content) {\n        /* istanbul ignore else */\n        if (_this.isActive) {\n          _this.setState({\n            content: content,\n            status: STATUS.LOADED\n          }, _this.getElement);\n        }\n      }\n    });\n    Object.defineProperty(_this, \"handleError\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: function (error) {\n        var onError = _this.props.onError;\n        var status = error.message === 'Browser does not support SVG' ? STATUS.UNSUPPORTED : STATUS.FAILED;\n        /* istanbul ignore else */\n        if (_this.isActive) {\n          _this.setState({\n            status: status\n          }, function () {\n            /* istanbul ignore else */\n            if (typeof onError === 'function') {\n              onError(error);\n            }\n          });\n        }\n      }\n    });\n    Object.defineProperty(_this, \"request\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: function () {\n        var _a = _this.props,\n          cacheRequests = _a.cacheRequests,\n          fetchOptions = _a.fetchOptions,\n          src = _a.src;\n        try {\n          if (cacheRequests) {\n            cacheStore[src] = {\n              content: '',\n              status: STATUS.LOADING\n            };\n          }\n          return fetch(src, fetchOptions).then(function (response) {\n            var contentType = response.headers.get('content-type');\n            var _a = __read((contentType || '').split(/ ?; ?/), 1),\n              fileType = _a[0];\n            if (response.status > 299) {\n              throw new Error('Not found');\n            }\n            if (!['image/svg+xml', 'text/plain'].some(function (d) {\n              return fileType.includes(d);\n            })) {\n              throw new Error(\"Content type isn't valid: \".concat(fileType));\n            }\n            return response.text();\n          }).then(function (content) {\n            var currentSrc = _this.props.src;\n            // the current src don't match the previous one, skipping...\n            if (src !== currentSrc) {\n              if (cacheStore[src].status === STATUS.LOADING) {\n                delete cacheStore[src];\n              }\n              return;\n            }\n            _this.handleLoad(content);\n            /* istanbul ignore else */\n            if (cacheRequests) {\n              var cache = cacheStore[src];\n              /* istanbul ignore else */\n              if (cache) {\n                cache.content = content;\n                cache.status = STATUS.LOADED;\n              }\n            }\n          }).catch(function (error) {\n            _this.handleError(error);\n            /* istanbul ignore else */\n            if (cacheRequests) {\n              var cache = cacheStore[src];\n              /* istanbul ignore else */\n              if (cache) {\n                delete cacheStore[src];\n              }\n            }\n          });\n        } catch (error) {\n          return _this.handleError(new Error(error.message));\n        }\n      }\n    });\n    _this.state = {\n      content: '',\n      element: null,\n      hasCache: !!props.cacheRequests && !!cacheStore[props.src],\n      status: STATUS.PENDING\n    };\n    _this.hash = props.uniqueHash || randomString(8);\n    return _this;\n  }\n  Object.defineProperty(InlineSVG.prototype, \"componentDidMount\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      this.isActive = true;\n      if (!canUseDOM() || this.isInitialized) {\n        return;\n      }\n      var status = this.state.status;\n      var src = this.props.src;\n      try {\n        /* istanbul ignore else */\n        if (status === STATUS.PENDING) {\n          /* istanbul ignore else */\n          if (!isSupportedEnvironment()) {\n            throw new Error('Browser does not support SVG');\n          }\n          /* istanbul ignore else */\n          if (!src) {\n            throw new Error('Missing src');\n          }\n          this.load();\n        }\n      } catch (error) {\n        this.handleError(error);\n      }\n      this.isInitialized = true;\n    }\n  });\n  Object.defineProperty(InlineSVG.prototype, \"componentDidUpdate\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (previousProps, previousState) {\n      if (!canUseDOM()) {\n        return;\n      }\n      var _a = this.state,\n        hasCache = _a.hasCache,\n        status = _a.status;\n      var _b = this.props,\n        onLoad = _b.onLoad,\n        src = _b.src;\n      if (previousState.status !== STATUS.READY && status === STATUS.READY) {\n        /* istanbul ignore else */\n        if (onLoad) {\n          onLoad(src, hasCache);\n        }\n      }\n      if (previousProps.src !== src) {\n        if (!src) {\n          this.handleError(new Error('Missing src'));\n          return;\n        }\n        this.load();\n      }\n    }\n  });\n  Object.defineProperty(InlineSVG.prototype, \"componentWillUnmount\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      this.isActive = false;\n    }\n  });\n  Object.defineProperty(InlineSVG.prototype, \"getNode\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var _a = this.props,\n        description = _a.description,\n        title = _a.title;\n      try {\n        var svgText = this.processSVG();\n        var node = convert(svgText, {\n          nodeOnly: true\n        });\n        if (!node || !(node instanceof SVGSVGElement)) {\n          throw new Error('Could not convert the src to a DOM Node');\n        }\n        var svg = this.updateSVGAttributes(node);\n        if (description) {\n          var originalDesc = svg.querySelector('desc');\n          if (originalDesc && originalDesc.parentNode) {\n            originalDesc.parentNode.removeChild(originalDesc);\n          }\n          var descElement = document.createElement('desc');\n          descElement.innerHTML = description;\n          svg.prepend(descElement);\n        }\n        if (title) {\n          var originalTitle = svg.querySelector('title');\n          if (originalTitle && originalTitle.parentNode) {\n            originalTitle.parentNode.removeChild(originalTitle);\n          }\n          var titleElement = document.createElement('title');\n          titleElement.innerHTML = title;\n          svg.prepend(titleElement);\n        }\n        return svg;\n      } catch (error) {\n        return this.handleError(error);\n      }\n    }\n  });\n  Object.defineProperty(InlineSVG.prototype, \"getElement\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      try {\n        var node = this.getNode();\n        var element = convert(node);\n        if (!element || !React.isValidElement(element)) {\n          throw new Error('Could not convert the src to a React element');\n        }\n        this.setState({\n          element: element,\n          status: STATUS.READY\n        });\n      } catch (error) {\n        this.handleError(new Error(error.message));\n      }\n    }\n  });\n  Object.defineProperty(InlineSVG.prototype, \"load\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var _this = this;\n      /* istanbul ignore else */\n      if (this.isActive) {\n        this.setState({\n          content: '',\n          element: null,\n          status: STATUS.LOADING\n        }, function () {\n          var _a = _this.props,\n            cacheRequests = _a.cacheRequests,\n            src = _a.src;\n          var cache = cacheRequests && cacheStore[src];\n          if (cache && cache.status === STATUS.LOADED) {\n            _this.handleLoad(cache.content);\n            return;\n          }\n          var dataURI = src.match(/data:image\\/svg[^,]*?(;base64)?,(.*)/);\n          var inlineSrc;\n          if (dataURI) {\n            inlineSrc = dataURI[1] ? window.atob(dataURI[2]) : decodeURIComponent(dataURI[2]);\n          } else if (src.includes('<svg')) {\n            inlineSrc = src;\n          }\n          if (inlineSrc) {\n            _this.handleLoad(inlineSrc);\n            return;\n          }\n          _this.request();\n        });\n      }\n    }\n  });\n  Object.defineProperty(InlineSVG.prototype, \"updateSVGAttributes\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (node) {\n      var _this = this;\n      var _a = this.props,\n        _b = _a.baseURL,\n        baseURL = _b === void 0 ? '' : _b,\n        uniquifyIDs = _a.uniquifyIDs;\n      var replaceableAttributes = ['id', 'href', 'xlink:href', 'xlink:role', 'xlink:arcrole'];\n      var linkAttributes = ['href', 'xlink:href'];\n      var isDataValue = function (name, value) {\n        return linkAttributes.includes(name) && (value ? !value.includes('#') : false);\n      };\n      if (!uniquifyIDs) {\n        return node;\n      }\n      __spreadArray([], __read(node.children), false).map(function (d) {\n        if (d.attributes && d.attributes.length) {\n          var attributes_1 = Object.values(d.attributes).map(function (a) {\n            var attribute = a;\n            var match = a.value.match(/url\\((.*?)\\)/);\n            if (match && match[1]) {\n              attribute.value = a.value.replace(match[0], \"url(\".concat(baseURL).concat(match[1], \"__\").concat(_this.hash, \")\"));\n            }\n            return attribute;\n          });\n          replaceableAttributes.forEach(function (r) {\n            var attribute = attributes_1.find(function (a) {\n              return a.name === r;\n            });\n            if (attribute && !isDataValue(r, attribute.value)) {\n              attribute.value = \"\".concat(attribute.value, \"__\").concat(_this.hash);\n            }\n          });\n        }\n        if (d.children.length) {\n          return _this.updateSVGAttributes(d);\n        }\n        return d;\n      });\n      return node;\n    }\n  });\n  Object.defineProperty(InlineSVG.prototype, \"processSVG\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var content = this.state.content;\n      var preProcessor = this.props.preProcessor;\n      if (preProcessor) {\n        return preProcessor(content);\n      }\n      return content;\n    }\n  });\n  Object.defineProperty(InlineSVG.prototype, \"render\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var _a = this.state,\n        element = _a.element,\n        status = _a.status;\n      var _b = this.props,\n        _c = _b.children,\n        children = _c === void 0 ? null : _c,\n        innerRef = _b.innerRef,\n        _d = _b.loader,\n        loader = _d === void 0 ? null : _d;\n      var elementProps = omit(this.props, 'baseURL', 'cacheRequests', 'children', 'description', 'fetchOptions', 'innerRef', 'loader', 'onError', 'onLoad', 'preProcessor', 'src', 'title', 'uniqueHash', 'uniquifyIDs');\n      if (!canUseDOM()) {\n        return loader;\n      }\n      if (element) {\n        return React.cloneElement(element, __assign({\n          ref: innerRef\n        }, elementProps));\n      }\n      if ([STATUS.UNSUPPORTED, STATUS.FAILED].includes(status)) {\n        return children;\n      }\n      return loader;\n    }\n  });\n  Object.defineProperty(InlineSVG, \"defaultProps\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: {\n      cacheRequests: true,\n      uniquifyIDs: false\n    }\n  });\n  return InlineSVG;\n}(React.PureComponent);\nexport default InlineSVG;\nexport * from './types';","map":{"version":3,"names":["React","convert","canUseDOM","isSupportedEnvironment","omit","randomString","STATUS","cacheStore","Object","create","InlineSVG","_super","__extends","props","_this","call","defineProperty","value","content","isActive","setState","status","LOADED","getElement","error","onError","message","UNSUPPORTED","FAILED","_a","cacheRequests","fetchOptions","src","LOADING","fetch","then","response","contentType","headers","get","__read","split","fileType","Error","some","d","includes","concat","text","currentSrc","handleLoad","cache","catch","handleError","state","element","hasCache","PENDING","hash","uniqueHash","isInitialized","load","previousProps","previousState","_b","onLoad","READY","description","title","svgText","processSVG","node","nodeOnly","SVGSVGElement","svg","updateSVGAttributes","originalDesc","querySelector","parentNode","removeChild","descElement","document","createElement","innerHTML","prepend","originalTitle","titleElement","getNode","isValidElement","dataURI","match","inlineSrc","window","atob","decodeURIComponent","request","baseURL","uniquifyIDs","replaceableAttributes","linkAttributes","isDataValue","name","__spreadArray","children","map","attributes","length","attributes_1","values","a","attribute","replace","forEach","r","find","preProcessor","_c","innerRef","_d","loader","elementProps","cloneElement","__assign","ref","PureComponent"],"sources":["/Users/NicRockwood/node_modules/react-inlinesvg/src/index.tsx"],"sourcesContent":["import * as React from 'react';\nimport convert from 'react-from-dom';\n\nimport { canUseDOM, isSupportedEnvironment, omit, randomString, STATUS } from './helpers';\nimport { FetchError, Props, State, StorageItem } from './types';\n\nexport const cacheStore: { [key: string]: StorageItem } = Object.create(null);\n\nexport default class InlineSVG extends React.PureComponent<Props, State> {\n  private isInitialized = false;\n  private isActive = false;\n  private readonly hash: string;\n\n  public static defaultProps = {\n    cacheRequests: true,\n    uniquifyIDs: false,\n  };\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      content: '',\n      element: null,\n      hasCache: !!props.cacheRequests && !!cacheStore[props.src],\n      status: STATUS.PENDING,\n    };\n\n    this.hash = props.uniqueHash || randomString(8);\n  }\n\n  public componentDidMount(): void {\n    this.isActive = true;\n\n    if (!canUseDOM() || this.isInitialized) {\n      return;\n    }\n\n    const { status } = this.state;\n    const { src } = this.props;\n\n    try {\n      /* istanbul ignore else */\n      if (status === STATUS.PENDING) {\n        /* istanbul ignore else */\n        if (!isSupportedEnvironment()) {\n          throw new Error('Browser does not support SVG');\n        }\n\n        /* istanbul ignore else */\n        if (!src) {\n          throw new Error('Missing src');\n        }\n\n        this.load();\n      }\n    } catch (error: any) {\n      this.handleError(error);\n    }\n\n    this.isInitialized = true;\n  }\n\n  public componentDidUpdate(previousProps: Props, previousState: State): void {\n    if (!canUseDOM()) {\n      return;\n    }\n\n    const { hasCache, status } = this.state;\n    const { onLoad, src } = this.props;\n\n    if (previousState.status !== STATUS.READY && status === STATUS.READY) {\n      /* istanbul ignore else */\n      if (onLoad) {\n        onLoad(src, hasCache);\n      }\n    }\n\n    if (previousProps.src !== src) {\n      if (!src) {\n        this.handleError(new Error('Missing src'));\n\n        return;\n      }\n\n      this.load();\n    }\n  }\n\n  public componentWillUnmount(): void {\n    this.isActive = false;\n  }\n\n  private getNode() {\n    const { description, title } = this.props;\n\n    try {\n      const svgText = this.processSVG();\n      const node = convert(svgText, { nodeOnly: true });\n\n      if (!node || !(node instanceof SVGSVGElement)) {\n        throw new Error('Could not convert the src to a DOM Node');\n      }\n\n      const svg = this.updateSVGAttributes(node);\n\n      if (description) {\n        const originalDesc = svg.querySelector('desc');\n\n        if (originalDesc && originalDesc.parentNode) {\n          originalDesc.parentNode.removeChild(originalDesc);\n        }\n\n        const descElement = document.createElement('desc');\n\n        descElement.innerHTML = description;\n        svg.prepend(descElement);\n      }\n\n      if (title) {\n        const originalTitle = svg.querySelector('title');\n\n        if (originalTitle && originalTitle.parentNode) {\n          originalTitle.parentNode.removeChild(originalTitle);\n        }\n\n        const titleElement = document.createElement('title');\n\n        titleElement.innerHTML = title;\n        svg.prepend(titleElement);\n      }\n\n      return svg;\n    } catch (error: any) {\n      return this.handleError(error);\n    }\n  }\n\n  private getElement() {\n    try {\n      const node = this.getNode() as Node;\n      const element = convert(node);\n\n      if (!element || !React.isValidElement(element)) {\n        throw new Error('Could not convert the src to a React element');\n      }\n\n      this.setState({\n        element,\n        status: STATUS.READY,\n      });\n    } catch (error: any) {\n      this.handleError(new Error(error.message));\n    }\n  }\n\n  private handleLoad = (content: string) => {\n    /* istanbul ignore else */\n    if (this.isActive) {\n      this.setState(\n        {\n          content,\n          status: STATUS.LOADED,\n        },\n        this.getElement,\n      );\n    }\n  };\n\n  private handleError = (error: Error | FetchError) => {\n    const { onError } = this.props;\n    const status =\n      error.message === 'Browser does not support SVG' ? STATUS.UNSUPPORTED : STATUS.FAILED;\n\n    /* istanbul ignore else */\n    if (this.isActive) {\n      this.setState({ status }, () => {\n        /* istanbul ignore else */\n        if (typeof onError === 'function') {\n          onError(error);\n        }\n      });\n    }\n  };\n\n  private request = () => {\n    const { cacheRequests, fetchOptions, src } = this.props;\n\n    try {\n      if (cacheRequests) {\n        cacheStore[src] = { content: '', status: STATUS.LOADING };\n      }\n\n      return fetch(src, fetchOptions)\n        .then(response => {\n          const contentType = response.headers.get('content-type');\n          const [fileType] = (contentType || '').split(/ ?; ?/);\n\n          if (response.status > 299) {\n            throw new Error('Not found');\n          }\n\n          if (!['image/svg+xml', 'text/plain'].some(d => fileType.includes(d))) {\n            throw new Error(`Content type isn't valid: ${fileType}`);\n          }\n\n          return response.text();\n        })\n        .then(content => {\n          const { src: currentSrc } = this.props;\n\n          // the current src don't match the previous one, skipping...\n          if (src !== currentSrc) {\n            if (cacheStore[src].status === STATUS.LOADING) {\n              delete cacheStore[src];\n            }\n\n            return;\n          }\n\n          this.handleLoad(content);\n\n          /* istanbul ignore else */\n          if (cacheRequests) {\n            const cache = cacheStore[src];\n\n            /* istanbul ignore else */\n            if (cache) {\n              cache.content = content;\n              cache.status = STATUS.LOADED;\n            }\n          }\n        })\n        .catch(error => {\n          this.handleError(error);\n\n          /* istanbul ignore else */\n          if (cacheRequests) {\n            const cache = cacheStore[src];\n\n            /* istanbul ignore else */\n            if (cache) {\n              delete cacheStore[src];\n            }\n          }\n        });\n    } catch (error: any) {\n      return this.handleError(new Error(error.message));\n    }\n  };\n\n  private load() {\n    /* istanbul ignore else */\n    if (this.isActive) {\n      this.setState(\n        {\n          content: '',\n          element: null,\n          status: STATUS.LOADING,\n        },\n        () => {\n          const { cacheRequests, src } = this.props;\n          const cache = cacheRequests && cacheStore[src];\n\n          if (cache && cache.status === STATUS.LOADED) {\n            this.handleLoad(cache.content);\n\n            return;\n          }\n\n          const dataURI = src.match(/data:image\\/svg[^,]*?(;base64)?,(.*)/);\n          let inlineSrc;\n\n          if (dataURI) {\n            inlineSrc = dataURI[1] ? window.atob(dataURI[2]) : decodeURIComponent(dataURI[2]);\n          } else if (src.includes('<svg')) {\n            inlineSrc = src;\n          }\n\n          if (inlineSrc) {\n            this.handleLoad(inlineSrc);\n\n            return;\n          }\n\n          this.request();\n        },\n      );\n    }\n  }\n\n  private updateSVGAttributes(node: SVGSVGElement): SVGSVGElement {\n    const { baseURL = '', uniquifyIDs } = this.props;\n    const replaceableAttributes = ['id', 'href', 'xlink:href', 'xlink:role', 'xlink:arcrole'];\n    const linkAttributes = ['href', 'xlink:href'];\n    const isDataValue = (name: string, value: string) =>\n      linkAttributes.includes(name) && (value ? !value.includes('#') : false);\n\n    if (!uniquifyIDs) {\n      return node;\n    }\n\n    [...node.children].map(d => {\n      if (d.attributes && d.attributes.length) {\n        const attributes = Object.values(d.attributes).map(a => {\n          const attribute = a;\n          const match = a.value.match(/url\\((.*?)\\)/);\n\n          if (match && match[1]) {\n            attribute.value = a.value.replace(match[0], `url(${baseURL}${match[1]}__${this.hash})`);\n          }\n\n          return attribute;\n        });\n\n        replaceableAttributes.forEach(r => {\n          const attribute = attributes.find(a => a.name === r);\n\n          if (attribute && !isDataValue(r, attribute.value)) {\n            attribute.value = `${attribute.value}__${this.hash}`;\n          }\n        });\n      }\n\n      if (d.children.length) {\n        return this.updateSVGAttributes(d as SVGSVGElement);\n      }\n\n      return d;\n    });\n\n    return node;\n  }\n\n  private processSVG() {\n    const { content } = this.state;\n    const { preProcessor } = this.props;\n\n    if (preProcessor) {\n      return preProcessor(content);\n    }\n\n    return content;\n  }\n\n  public render(): React.ReactNode {\n    const { element, status } = this.state;\n    const { children = null, innerRef, loader = null } = this.props;\n    const elementProps = omit(\n      this.props,\n      'baseURL',\n      'cacheRequests',\n      'children',\n      'description',\n      'fetchOptions',\n      'innerRef',\n      'loader',\n      'onError',\n      'onLoad',\n      'preProcessor',\n      'src',\n      'title',\n      'uniqueHash',\n      'uniquifyIDs',\n    );\n\n    if (!canUseDOM()) {\n      return loader;\n    }\n\n    if (element) {\n      return React.cloneElement(element as React.ReactElement, { ref: innerRef, ...elementProps });\n    }\n\n    if ([STATUS.UNSUPPORTED, STATUS.FAILED].includes(status)) {\n      return children;\n    }\n\n    return loader;\n  }\n}\n\nexport * from './types';\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}